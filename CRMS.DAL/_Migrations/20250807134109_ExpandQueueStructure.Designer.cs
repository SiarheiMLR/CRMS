// <auto-generated />
using System;
using CRMS.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMS.DAL.Migrations
{
    [DbContext(typeof(CRMSDbContext))]
    [Migration("20250807134109_ExpandQueueStructure")]
    partial class ExpandQueueStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CRMS.Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.CustomField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CustomFields");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.CustomFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("TicketId");

                    b.ToTable("CustomFieldValues");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FaqCategories");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerMarkdown")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NegativeVotes")
                        .HasColumnType("int");

                    b.Property<int>("PositiveVotes")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("FaqItems");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqItemHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerMarkdown")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FaqItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FaqItemId");

                    b.ToTable("FaqItemHistories");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqItemTag", b =>
                {
                    b.Property<int>("FaqItemId")
                        .HasColumnType("int");

                    b.Property<int>("FaqTagId")
                        .HasColumnType("int");

                    b.HasKey("FaqItemId", "FaqTagId");

                    b.HasIndex("FaqTagId");

                    b.ToTable("FaqItemTags");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FaqTags");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FaqItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FaqItemId");

                    b.HasIndex("UserId");

                    b.ToTable("FaqVotes");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSystemGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.GroupRoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("GroupRoleMappings");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentQueueId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("SlaResolutionTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("SlaResponseTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("ParentQueueId");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.QueueAutomationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QueueId")
                        .HasColumnType("int");

                    b.Property<string>("TriggerEvent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("QueueAutomationRule");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.QueuePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<int>("QueueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("QueueId");

                    b.ToTable("QueuePermission");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("QueueId")
                        .HasColumnType("int");

                    b.Property<int>("RequestorId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("RequestorId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.TicketStatusDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QueueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("TicketStatusDefinition");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccountCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("longblob");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IPPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserLogonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WebPage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WorkPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountCreated = new DateTime(2025, 8, 7, 13, 41, 6, 659, DateTimeKind.Utc).AddTicks(2412),
                            City = "Malorita",
                            Company = "BIGFIRM",
                            Country = "Belarus",
                            DateOfBirth = new DateTime(1984, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "IT Support",
                            Description = "Встроенная учетная запись для управления системой CRMS и доменом bigfirm.by",
                            DisplayName = "Siarhei Kuzmich",
                            Email = "admin@bigfirm.by",
                            FirstName = "Siarhei",
                            IPPhone = "не указан",
                            Initials = "Y",
                            JobTitle = "System Administrator",
                            LastName = "Kuzmich",
                            ManagerName = "не указан",
                            MobilePhone = "+375-29-7012884",
                            Office = "не указан",
                            PasswordHash = "BakKGnGaKjiRVKVnlApPodR0kxQrltKzbGI4UIMG9vQ=",
                            PasswordSalt = "5YNt82J0tC9y2cW9Oy9CHA==",
                            PostalCode = "225903",
                            Role = 2,
                            State = "Brest region",
                            Status = 0,
                            Street = "Sovetskay 113",
                            UserLogonName = "administrator@bigfirm.by",
                            WebPage = "http://www.bigfirm.by",
                            WorkPhone = "+375-33-6575238"
                        });
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.CustomFieldValue", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.CustomField", "CustomField")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Domain.Entities.Ticket", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("TicketId");

                    b.Navigation("CustomField");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqItem", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Domain.Entities.FaqCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqItemHistory", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.FaqItem", "FaqItem")
                        .WithMany("History")
                        .HasForeignKey("FaqItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqItem");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqItemTag", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.FaqItem", "FaqItem")
                        .WithMany("FaqItemTags")
                        .HasForeignKey("FaqItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Domain.Entities.FaqTag", "FaqTag")
                        .WithMany("FaqItemTags")
                        .HasForeignKey("FaqTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqItem");

                    b.Navigation("FaqTag");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqVote", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.FaqItem", "FaqItem")
                        .WithMany("Votes")
                        .HasForeignKey("FaqItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Domain.Entities.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.GroupRoleMapping", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.Group", "Group")
                        .WithOne("GroupRoleMapping")
                        .HasForeignKey("CRMS.Domain.Entities.GroupRoleMapping", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Queue", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.Queue", "ParentQueue")
                        .WithMany("SubQueues")
                        .HasForeignKey("ParentQueueId");

                    b.Navigation("ParentQueue");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.QueueAutomationRule", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.Queue", "Queue")
                        .WithMany("AutomationRules")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.QueuePermission", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Domain.Entities.Queue", "Queue")
                        .WithMany("Permissions")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.Queue", "Queue")
                        .WithMany("Tickets")
                        .HasForeignKey("QueueId");

                    b.HasOne("CRMS.Domain.Entities.User", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRMS.Domain.Entities.User", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CRMS.Domain.Entities.User", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("Queue");

                    b.Navigation("Requestor");

                    b.Navigation("Supporter");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.TicketStatusDefinition", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.Queue", "Queue")
                        .WithMany("Statuses")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("CRMS.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMS.Domain.Entities.Ticket", "Ticket")
                        .WithMany("Transactions")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.CustomField", b =>
                {
                    b.Navigation("CustomFieldValues");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqItem", b =>
                {
                    b.Navigation("FaqItemTags");

                    b.Navigation("History");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.FaqTag", b =>
                {
                    b.Navigation("FaqItemTags");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("GroupRoleMapping")
                        .IsRequired();
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Queue", b =>
                {
                    b.Navigation("AutomationRules");

                    b.Navigation("Permissions");

                    b.Navigation("Statuses");

                    b.Navigation("SubQueues");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CustomFieldValues");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CRMS.Domain.Entities.User", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
